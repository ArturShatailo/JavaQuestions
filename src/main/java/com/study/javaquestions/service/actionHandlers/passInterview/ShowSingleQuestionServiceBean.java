package com.study.javaquestions.service.actionHandlers.passInterview;

import com.study.javaquestions.bot.sender.SenderServiceBean;
import com.study.javaquestions.bot.session.BotSession;
import com.study.javaquestions.domain.Interview;
import com.study.javaquestions.domain.Question;
import com.study.javaquestions.domain.Request;
import com.study.javaquestions.service.actionHandlers.Showable;
import com.study.javaquestions.service.button.ButtonServiceBean;
import com.study.javaquestions.service.button.KeyboardButtons;
import com.study.javaquestions.service.interview.InterviewServiceBean;
import lombok.AllArgsConstructor;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import java.util.Arrays;
import java.util.List;

@Component
@AllArgsConstructor
@Transactional
public class ShowSingleQuestionServiceBean implements BotSession, KeyboardButtons<String>, Showable<Question> {

    private final SenderServiceBean sender;

    private final ButtonServiceBean buttons;

    private final InterviewServiceBean interviewServiceBean;

    @Override
    public void defineRequest(Request request) {
        String chatID = request.getSendMessage().getChatId();

        Interview interview = interviewServiceBean.getByChatID(chatID);
        interview.upscaleCurrentQuestion();

        if (interview.checkQuestionsAmount()) nothingToShow(request);
        else {
            showKeyboardButtons(request,
                    "–ü–∏—Ç–∞–Ω–Ω—è " + interview.getCurrentQuestion() + " –∑ " + interview.getMaxQuestion(),
                    List.of("üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"));
            show(interview.defineCurrentQuestion(), request);
        }
    }

    @Override
    public void nothingToShow(Request request) {
        showKeyboardButtons(request,
                "–¶–µ –±—É–ª–æ –æ—Å—Ç–∞–Ω–Ω—î –ø–∏—Ç–∞–Ω–Ω—è  \uD83E\uDD37",
                List.of("–ü–æ–∫–∞–∑–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–ø—ñ–≤–±–µ—Å—ñ–¥–∏", "üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"));
    }

    @Override
    public void show(Question q, Request request) {

        sender.sendMessageWithButtons(
                request,
                "‚ùì " + q.getTitle() + "\n\n" +
                        "–ü—ñ–¥–∫–∞–∑–∫–∞: <span class=\"tg-spoiler\">" + q.getHint() + "</span>",
                buttons.createInlineKeyboard(
                        buttons.getKeyboardMap(
                                Arrays.asList(
                                        "–ù–µ –∑–Ω–∞—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å, –¥–∞–ª—ñ", "–ù–µ –∑–Ω–∞—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è " + "#" + q.getId(),
                                        "–ì–æ—Ç–æ–≤–∏–π –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏", "–ì–æ—Ç–æ–≤–∏–π –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è " + "#" + q.getId())
                        )));
    }

    @Override
    public void showKeyboardButtons(Request request, String text, List<String> buttonsText) {
        sender.sendMessageWithButtons(
                request,
                text,
                buttons.createKeyboard(buttonsText)
        );
    }

}
