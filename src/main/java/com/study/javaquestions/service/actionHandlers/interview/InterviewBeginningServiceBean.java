package com.study.javaquestions.service.actionHandlers.interview;

import com.study.javaquestions.bot.sender.SenderServiceBean;
import com.study.javaquestions.bot.session.BotSession;
import com.study.javaquestions.domain.Request;
import com.study.javaquestions.service.actionHandlers.ActionHandlerService;
import com.study.javaquestions.service.button.ButtonServiceBean;
import com.study.javaquestions.service.button.KeyboardButtons;
import lombok.AllArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
@AllArgsConstructor
public class InterviewBeginningServiceBean implements ActionHandlerService, BotSession, KeyboardButtons<String> {

    private final SenderServiceBean sender;

    private final ButtonServiceBean buttons;

    @Override
    public int globalCheck() {
        return 0;
    }

    @Override
    public boolean mineCheck(Request request) {
        String requestSessionValue = "INTERVIEW START";
        String requestValue = "Noooo God! No! God, please, no!";
        String requestValue1 = "Not ready, but let's start";
        String requestValue2 = "Yeah!";
        return (request.getSendMessage().getText().toLowerCase().endsWith(requestValue.toLowerCase())
                || request.getSendMessage().getText().toLowerCase().endsWith(requestValue1.toLowerCase())
                || request.getSendMessage().getText().toLowerCase().endsWith(requestValue2.toLowerCase()))
                && request.getSessionStep().toLowerCase().startsWith(requestSessionValue.toLowerCase());
    }

    @Override
    public void sendRequest(Request request) {
        String chatID = request.getSendMessage().getChatId();
        sessions.put(chatID, "INTERVIEW");
        sessionSteps.put(chatID, "INTERVIEW STARTED");

        //define all the questions (random 1-4 from each topic)
        //this list of questions should be saved in database as an Interview
        //the answers list should be saved as a map where key is question id and value is String
        //inputted as an answer.


        //Interview
        //Long id
        //List<InterviewQuestion> questions

        //InterviewQuestion
        //Long id
        //Question question
        //String answer


        showKeyboardButtons(request,
                "–ó–∞—Ä–∞–∑ —è –±—É–¥—É —Ç–æ–±—ñ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è, –∞ —Ç–∏ –º–∞—î—à –≤—ñ–¥–ø—Ä–∏–≤–ª—è—Ç–∏ –º–µ–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ. " +
                        "–í –∫—ñ–Ω—Ü—ñ —Å–ø—ñ–≤–±–µ—Å—ñ–¥–∏, —Ç–∏ –∑–º–æ–∂–µ—à —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ –æ—Ü—ñ–Ω–∏—Ç–∏ –Ω–∞—Å–∫—ñ–ª—å–∫–∏ —Ç–∏ –≤–ø–æ—Ä–∞–≤—Å—è, —è –Ω–∞–¥–∞–º —Ç–æ–±—ñ —Å–ø–∏—Å–æ–∫" +
                        "–≤—Å—ñ—Ö –ø—Ä–æ–π–¥–µ–Ω–∏—Ö –ø–∏—Ç–∞–Ω—å —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –Ω–∏—Ö, —Ä—ñ–∑–æ–º —ñ–∑ —Ç–≤–æ—ó–º –≤–∞—Ä—ñ–∞–Ω—Ç–æ–º –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è.",
                List.of("–ü–æ–∫–∞–∑–∞—Ç–∏ –ø–µ—Ä—à–µ –ø–∏—Ç–∞–Ω–Ω—è", "üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"));
    }

    @Override
    public void showKeyboardButtons(Request request, String text, List<String> buttonsText) {
        sender.sendMessageWithButtons(
                request,
                text,
                buttons.createKeyboard(buttonsText)
        );
    }
}
